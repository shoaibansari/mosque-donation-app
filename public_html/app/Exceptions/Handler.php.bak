<?php

namespace App\Exceptions;

use Exception;
use Illuminate\Database\QueryException;
use Illuminate\Auth\AuthenticationException;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Illuminate\Session\TokenMismatchException;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Route;

class Handler extends ExceptionHandler
{
    /**
     * A list of the exception types that should not be reported.
     *
     * @var array
     */
    protected $dontReport = [
        \Illuminate\Auth\AuthenticationException::class,
        \Illuminate\Auth\Access\AuthorizationException::class,
        \Symfony\Component\HttpKernel\Exception\HttpException::class,
        \Illuminate\Database\Eloquent\ModelNotFoundException::class,
        \Illuminate\Session\TokenMismatchException::class,
        \Illuminate\Validation\ValidationException::class,
    ];

    /**
     * Report or log an exception.
     *
     * This is a great spot to send exceptions to Sentry, Bugsnag, etc.
     *
     * @param  \Exception  $exception
     * @return void
     */
    public function report(Exception $exception)
    {
        parent::report($exception);
    }

    /**
     * Render an exception into an HTTP response.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Exception  $exception
     * @return \Illuminate\Http\Response
     */
    public function render($request, Exception $exception)
    {

	    if ( $request->is( 'api/*' ) ) {

		    $msg = 'An unknown error has occurred. Please contact admin.';
		    $details = $exception->getMessage();

		    if ( $this->isHttpException( $exception ) && $exception->getStatusCode() == '404' ) {
			    $msg = 'The requested feature is not available.';
		    }

		    if ( $exception instanceof \PDOException ) {
			    $msg = "Unable to establish connection with the database.";
			    $details = $exception->getMessage();
		    }
	        else if ( $exception instanceof QueryException ) {
			    $msg = 'An error has occurred while interacting with the database.';
			    $details = $exception->getMessage();
		    }

		    $response = ['msg' => $msg, 'details' => $details];
		    if ( env( 'APP_DEBUG' ) ) {
			    $response[ 'file' ] = $exception->getFile() . ' @line#: ' . $exception->getLine();
		    }

		    return response()->json( $response, 503 );
	    }

	    // Database connection error
//	    if ( $exception instanceof \PDOException ) {
//            throw new \PDOException("Unable to establish connection with the database.");
//	    }

		// Token Mismatch Error
	    if ( $exception instanceof TokenMismatchException ) {
		    return redirect( $request->fullUrl() )
			    ->with( 'error', "You couldn't submit form for a longtime. Please try again." )->setStatusCode( 503 );
	    }

	    // 404 Page
	    if ( $exception instanceof NotFoundHttpException ) {
		    return response()->view( toolbox()->frontend()->view('errors.404') )->setStatusCode(404);
	    }


	    return parent::render($request, $exception);
    }

    /**
     * Convert an authentication exception into an unauthenticated response.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Illuminate\Auth\AuthenticationException  $exception
     * @return \Illuminate\Http\Response
     */
    protected function unauthenticated($request, AuthenticationException $exception)
    {
        if ($request->expectsJson()) {
            return response()->json(['error' => 'Unauthenticated.'], 401);
        }

        if ( strstr( Route::currentRouteName(), 'admin' ) ) {
            return redirect()->guest(route('admin.login'));
        }

        return redirect()->guest(route('login'));
    }
}
